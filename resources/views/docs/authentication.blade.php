<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication trong Laravel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body class="bg-light">

    <div class="container mt-5">
        <div class="card shadow-lg">
            <div class="card-header bg-success text-white text-center">
                <h1>X√°c Th·ª±c (Authentication) trong Laravel</h1>
            </div>
            <div class="card-body">
                <h3>1. Gi·ªõi Thi·ªáu</h3>
                <p>Laravel cung c·∫•p h·ªá th·ªëng x√°c th·ª±c ng∆∞·ªùi d√πng m·∫°nh m·∫Ω, h·ªó tr·ª£ c·∫£ x√°c th·ª±c th·ªß c√¥ng v√† t·ª± ƒë·ªông th√¥ng
                    qua Laravel Breeze, Jetstream ho·∫∑c Fortify.</p>

                <h3>2. T·∫°o Authentication T·ª± ƒê·ªông</h3>
                <p>B·∫°n c√≥ th·ªÉ d√πng c√°c starter kit ƒë·ªÉ t·∫°o nhanh h·ªá th·ªëng auth:</p>

                <h5>2.1 Laravel Breeze</h5>
                <pre><code>composer require laravel/breeze --dev
php artisan breeze:install
npm install && npm run dev
php artisan migrate</code></pre>

                <h5>2.2 Laravel Jetstream</h5>
                <pre><code>composer require laravel/jetstream
php artisan jetstream:install livewire
npm install && npm run dev
php artisan migrate</code></pre>

                <h3>3. T·∫°o Authentication Th·ªß C√¥ng</h3>

                <h5>3.1 T·∫°o Route</h5>
                <pre><code>
use App\Http\Controllers\AuthController;

Route::get('/login', [AuthController::class, 'showLoginForm'])->name('login');
Route::post('/login', [AuthController::class, 'login']);
Route::post('/logout', [AuthController::class, 'logout'])->name('logout');
Route::get('/register', [AuthController::class, 'showRegisterForm'])->name('register');
Route::post('/register', [AuthController::class, 'register']);
</code></pre>

                <h5>3.2 T·∫°o Controller</h5>
                <pre><code>php artisan make:controller AuthController</code></pre>

                <pre><code>
namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;

class AuthController extends Controller
{
    public function showLoginForm() {
        return view('auth.login');
    }

    public function login(Request $request) {
        $credentials = $request->only('email', 'password');

        // L·ªánh ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p:
        // Auth::attempt($credentials) s·∫Ω ki·ªÉm tra xem email v√† password c√≥ h·ª£p l·ªá kh√¥ng.
        // N·∫øu ƒë√∫ng, Laravel s·∫Ω ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ true.
        // N·∫øu sai, tr·∫£ v·ªÅ false.
        // H√†m n√†y s·∫Ω t·ª± ƒë·ªông hash password ƒë·ªÉ so s√°nh v·ªõi password trong DB.

        // ‚úÖ N·∫øu mu·ªën x√°c th·ª±c theo 'username' thay v√¨ 'email':
        // $credentials = $request->only('username', 'password');
        // => Laravel s·∫Ω d√πng c·ªôt 'username' trong b·∫£ng users ƒë·ªÉ x√°c th·ª±c.

        // ‚úÖ Ghi nh·ªõ ƒëƒÉng nh·∫≠p:
        // Auth::attempt($credentials, $remember)
        // N·∫øu $remember = true, Laravel s·∫Ω l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p v√†o cookie ƒë·ªÉ kh√¥ng b·ªã ƒëƒÉng xu·∫•t khi t·∫Øt tr√¨nh duy·ªát.

        if (Auth::attempt($credentials)) {
            $request->session()->regenerate();
            return redirect()->intended('/dashboard');
        }

        return back()->withErrors([
            'email' => 'Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng.',
        ]);
    }

    public function logout(Request $request) {
        Auth::logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();
        return redirect('/login');
    }

    public function showRegisterForm() {
        return view('auth.register');
    }

    public function register(Request $request) {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users',
            'password' => 'required|min:6|confirmed',
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        Auth::login($user);

        return redirect('/dashboard');
    }
}
</code></pre>
                <h5>3.2.1 Gi·∫£i th√≠ch m·ªôt s·ªë c√¢u h·ªèi th∆∞·ªùng g·∫∑p</h5>
                <ul>
                    <li><strong>Auth::attempt() ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?</strong><br>
                        Ph∆∞∆°ng th·ª©c <code>Auth::attempt($credentials)</code> s·∫Ω ki·ªÉm tra xem email v√† m·∫≠t kh·∫©u truy·ªÅn
                        v√†o c√≥ h·ª£p l·ªá kh√¥ng (d·ª±a v√†o b·∫£ng <code>users</code>). Laravel s·∫Ω t·ª± ƒë·ªông hash m·∫≠t kh·∫©u ƒë√£ nh·∫≠p
                        v√† so s√°nh v·ªõi m·∫≠t kh·∫©u ƒë∆∞·ª£c l∆∞u trong c∆° s·ªü d·ªØ li·ªáu. N·∫øu kh·ªõp, n√≥ s·∫Ω ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng v√†
                        tr·∫£ v·ªÅ <code>true</code>; ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ <code>false</code>.
                    </li>

                    <li class="mt-2"><strong>auth()->user() v√† Auth::user() kh√°c nhau kh√¥ng?</strong><br>
                        C·∫£ hai ƒë·ªÅu tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i ƒë√£ ƒëƒÉng nh·∫≠p. V·ªÅ b·∫£n ch·∫•t:
                        <ul>
                            <li><code>auth()</code> l√† helper function, ti·ªán d√πng khi c·∫ßn chain method nhanh nh∆∞
                                <code>auth()->user()->email</code>
                            </li>
                            <li><code>Auth::user()</code> d√πng khi b·∫°n mu·ªën g·ªçi th√¥ng qua facade <code>Auth</code></li>
                        </ul>
                        Ch√∫ng t∆∞∆°ng ƒë∆∞∆°ng nhau, b·∫°n c√≥ th·ªÉ d√πng t√πy theo phong c√°ch code b·∫°n th√≠ch.
                    </li>

                    <li class="mt-2"><strong>S·ª≠ d·ª•ng ƒëi·ªÅu ki·ªán n√¢ng cao v·ªõi Auth::attempt()</strong><br>
                        T·ª´ Laravel 9.42+, b·∫°n c√≥ th·ªÉ truy·ªÅn th√™m m·ªôt callback (ho·∫∑c closure) v√†o trong m·∫£ng
                        <code>Auth::attempt()</code> ƒë·ªÉ gi·ªõi h·∫°n th√™m ƒëi·ªÅu ki·ªán truy v·∫•n.<br>
                        V√≠ d·ª•:
                        <pre><code>
if (Auth::attempt([
    'email' => $email,
    'password' => $password,
    fn (Builder $query) => $query->has('activeSubscription'),
])) {
    // Ng∆∞·ªùi d√πng c√≥ email, m·∫≠t kh·∫©u ƒë√∫ng v√† c√≥ subscription ƒëang active
}
        </code></pre>
                        Trong v√≠ d·ª• n√†y, Laravel s·∫Ω ch·ªâ ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng n·∫øu h·ªç c√≥ quan h·ªá
                        <code>activeSubscription</code> (m·ªôt quan h·ªá Eloquent ƒë√£ ƒë·ªãnh nghƒ©a trong model User nh∆∞
                        <code>hasOne</code> ho·∫∑c <code>hasMany</code> v·ªõi ƒëi·ªÅu ki·ªán ƒëang ho·∫°t ƒë·ªông).
                    </li>
                </ul>


                <h5>3.3 T·∫°o Seeder Ng∆∞·ªùi D√πng</h5>
                <pre><code>php artisan make:seeder UserSeeder</code></pre>
                <pre><code>
use App\Models\User;
use Illuminate\Support\Facades\Hash;

User::create([
    'name' => 'Admin',
    'email' => 'admin@example.com',
    'password' => Hash::make('password')
]);
</code></pre>

                <h5>3.4 Middleware auth</h5>
                <pre><code>
Route::middleware('auth')->get('/dashboard', function () {
    return view('dashboard');
});
</code></pre>

                <h5>3.5 L·∫•y Th√¥ng Tin Ng∆∞·ªùi D√πng ƒêang ƒêƒÉng Nh·∫≠p</h5>
                <p>ƒê·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:</p>
                <pre><code>
$user = Auth::user();
$name = Auth::user()->name;
$email = auth()->user()->email;
</code></pre>

                <h3>4. Authentication API cho App</h3>

                <h5>4.1 Laravel Sanctum ‚Äì D√†nh cho SPA ho·∫∑c Mobile App ƒë∆°n gi·∫£n</h5>
                <p><strong>Laravel Sanctum</strong> l√† package nh·∫π, d·ªÖ c·∫•u h√¨nh, h·ªó tr·ª£ x√°c th·ª±c API token, l√Ω t∆∞·ªüng cho
                    SPA (Single Page Application) ho·∫∑c ·ª©ng d·ª•ng mobile kh√¥ng qu√° ph·ª©c t·∫°p.</p>

                <h6>∆Øu ƒëi·ªÉm:</h6>
                <ul>
                    <li>C√†i ƒë·∫∑t ƒë∆°n gi·∫£n</li>
                    <li>H·ªó tr·ª£ x√°c th·ª±c d·ª±a tr√™n cookie ho·∫∑c token</li>
                    <li>Kh√¥ng y√™u c·∫ßu flow OAuth2 ph·ª©c t·∫°p</li>
                </ul>

                <h6>C√°c b∆∞·ªõc c√†i ƒë·∫∑t:</h6>
                <pre><code>composer require laravel/sanctum
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
php artisan migrate</code></pre>

                <p><strong>Gi·∫£i th√≠ch:</strong></p>
                <ul>
                    <li><code>composer require laravel/sanctum</code>: C√†i g√≥i Sanctum ƒë·ªÉ Laravel h·ªó tr·ª£ x√°c th·ª±c API
                        th√¥ng qua token.</li>
                    <li><code>php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"</code>:
                        Copy file c·∫•u h√¨nh <code>config/sanctum.php</code> t·ª´ g√≥i Sanctum v·ªÅ project, d√πng ƒë·ªÉ tu·ª≥ ch·ªânh.
                    </li>
                    <li><code>php artisan migrate</code>: T·∫°o b·∫£ng <code>personal_access_tokens</code> trong database ƒë·ªÉ
                        l∆∞u c√°c token.</li>
                </ul>
                {{-- <p>üõ°Ô∏è Th√™m middleware cho API: B·∫°n s·∫Ω th√™m ƒëo·∫°n sau v√†o file app/Http/Kernel.php, trong ph·∫ßn middlewareGroups, c·ª• th·ªÉ l√† group 'api':</p>
                <pre><code>'api' => [
    \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
    'throttle:api',
    \Illuminate\Routing\Middleware\SubstituteBindings::class,
],</code></pre>

                <p><strong>Gi·∫£i th√≠ch:</strong></p>
                <ul>
                    <li><code>EnsureFrontendRequestsAreStateful</code>: Middleware n√†y d√πng cho ·ª©ng d·ª•ng d·∫°ng SPA
                        (Single Page Application) s·ª≠ d·ª•ng cookie ƒë·ªÉ x√°c th·ª±c. N√≥ ƒë·∫£m b·∫£o c√°c request t·ª´ frontend ƒë∆∞·ª£c x·ª≠
                        l√Ω ƒë√∫ng trong tr·∫°ng th√°i ƒëƒÉng nh·∫≠p.</li>
                    <li><code>throttle:api</code>: Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng request trong m·ªôt kho·∫£ng th·ªùi gian (rate limiting),
                        tr√°nh spam API.</li>
                    <li><code>SubstituteBindings</code>: T·ª± ƒë·ªông binding c√°c route parameters v√†o model t∆∞∆°ng ·ª©ng (Route
                        Model Binding).</li>
                </ul> --}}


                <h4>üìå T·∫°o Route cho API s·ª≠ d·ª•ng Sanctum</h4>

                <p>Th√™m c√°c route sau v√†o <code>routes/api.php</code>:</p>

                <pre><code>
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ApiController;

// Route ƒëƒÉng nh·∫≠p tr·∫£ v·ªÅ token
Route::post('/login', [ApiController::class, 'login']);

// Route ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng Sanctum
Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});
</code></pre>

                <h4>üìå T·∫°o Controller x·ª≠ l√Ω ƒëƒÉng nh·∫≠p</h4>

                <p>T·∫°o <code>ApiController</code> n·∫øu b·∫°n ch∆∞a c√≥:</p>
                <pre><code>php artisan make:controller ApiController</code></pre>

                <p>Th√™m ph∆∞∆°ng th·ª©c <code>login</code> v√†o <code>app/Http/Controllers/ApiController.php</code>:</p>

                <pre><code>
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use App\Models\User;

class ApiController extends Controller
{
    public function login(Request $request)
    {
        $user = User::where('email', $request->email)->first();

        if (! $user || ! Hash::check($request->password, $user->password)) {
            return response()->json(['message' => 'Sai th√¥ng tin'], 401);
        }

        return response()->json([
            'token' => $user->createToken('app-token')->plainTextToken
        ]);
    }
}
</code></pre>
                <h6>Th√™m trait v√†o model User:</h6>
                <p>ƒê·ªÉ s·ª≠ d·ª•ng ƒë∆∞·ª£c ph∆∞∆°ng th·ª©c <code>createToken()</code>, b·∫°n c·∫ßn th√™m trait <code>HasApiTokens</code>
                    v√†o model <code>User</code>:</p>

                <pre><code>
// File: app/Models/User.php

use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    // ...
}
</code></pre>


                <p>Sau ƒë√≥ b·∫°n c√≥ th·ªÉ d√πng Postman ƒë·ªÉ test:</p>
                <ul>
                    <li>
                        <code>POST /api/login</code>: G·ª≠i email v√† password ƒë·ªÉ nh·∫≠n token.
                        <br>
                        <strong>Body (JSON):</strong>
                        <pre><code>{
    "email": "user@example.com",
    "password": "your_password"
}</code></pre>
                        <strong>Headers:</strong>
                        <ul>
                            <li><code>Accept: application/json</code></li>
                            <li><code>Content-Type: application/json</code></li>
                        </ul>
                    </li>
                    <li>
                        <code>GET /api/user</code>: G·ª≠i token trong header Authorization ƒë·ªÉ truy c·∫≠p.
                        <br>
                        <strong>Headers:</strong>
                        <ul>
                            <li><code>Accept: application/json</code></li>
                            <li><code>Authorization: Bearer &lt;token&gt;</code> (thay <code>&lt;token&gt;</code> b·∫±ng
                                token b·∫°n nh·∫≠n ƒë∆∞·ª£c khi login)</li>
                        </ul>
                    </li>
                </ul>



                <h5>4.2 Laravel Passport ‚Äì D√†nh cho ·ª©ng d·ª•ng c·∫ßn OAuth2 ph·ª©c t·∫°p</h5>
                <p><strong>Laravel Passport</strong> l√† gi·∫£i ph√°p x√°c th·ª±c ƒë·∫ßy ƒë·ªß d·ª±a tr√™n chu·∫©n
                    <strong>OAuth2</strong>. N√≥ r·∫•t ph√π h·ª£p n·∫øu b·∫°n c·∫ßn:</p>
                <ul>
                    <li>C·∫•p token cho ·ª©ng d·ª•ng b√™n th·ª© ba</li>
                    <li>Ph√¢n bi·ªát gi·ªØa nhi·ªÅu client (v√≠ d·ª•: mobile app, SPA, b√™n ƒë·ªëi t√°c...)</li>
                    <li>Qu·∫£n l√Ω token c√≥ th·ªùi h·∫°n, refresh token, v√† c√°c quy·ªÅn (scope)</li>
                </ul>

                <h6>∆Øu ƒëi·ªÉm:</h6>
                <ul>
                    <li>H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß c√°c flow OAuth2: Authorization Code, Client Credentials, Password Grant, Refresh
                        Token...</li>
                    <li>T√≠ch h·ª£p s·∫µn giao di·ªán c·∫•p token (d√πng trong qu√° tr√¨nh dev ho·∫∑c qu·∫£n l√Ω)</li>
                    <li>C√≥ th·ªÉ c·∫•u h√¨nh scope ƒë·ªÉ gi·ªõi h·∫°n quy·ªÅn c·ªßa t·ª´ng token</li>
                </ul>

                <h6>C√°c b∆∞·ªõc c√†i ƒë·∫∑t:</h6>
                <pre><code>composer require laravel/passport
php artisan migrate
php artisan passport:install</code></pre>

                <h6>C·∫≠p nh·∫≠t model <code>User</code>:</h6>
                <pre><code>use Laravel\Passport\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, Notifiable;
}</code></pre>

                <h6>Trong <code>App\Providers\AuthServiceProvider</code>:</h6>
                <pre><code>use Laravel\Passport\Passport;

public function boot()
{
    Passport::routes();
}</code></pre>

                <h6>Trong file <code>config/auth.php</code>, s·ª≠a ph·∫ßn guard <code>api</code>:</h6>
                <pre><code>'guards' => [
    'api' => [
        'driver' => 'passport',
        'provider' => 'users',
    ],
],</code></pre>

                <h6>Route v√† x·ª≠ l√Ω ƒëƒÉng nh·∫≠p ƒë·ªÉ nh·∫≠n token:</h6>
                <pre><code>// Route trong routes/api.php
Route::post('/login', [AuthController::class, 'login']);
</code></pre>

                <pre><code>// AuthController.php
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

public function login(Request $request)
{
    if (!Auth::attempt($request->only('email', 'password'))) {
        return response()->json(['message' => 'Sai th√¥ng tin ƒëƒÉng nh·∫≠p'], 401);
    }

    $user = Auth::user();
    $token = $user->createToken('API Token')->accessToken;

    return response()->json([
        'token' => $token,
        'user' => $user,
    ]);
}
</code></pre>

                <h6>B·∫£o v·ªá route b·∫±ng middleware <code>auth:api</code>:</h6>
                <pre><code>Route::middleware('auth:api')->get('/user', function (Request $request) {
    return $request->user();
});</code></pre>

                <h6>S·ª≠ d·ª•ng Postman ƒë·ªÉ test:</h6>
                <ul>
                    <li><code>POST /api/login</code>: g·ª≠i <strong>email</strong> v√† <strong>password</strong> trong body
                        (JSON) ƒë·ªÉ l·∫•y access token.</li>
                    <li><code>GET /api/user</code>: g·ª≠i <code>Authorization: Bearer &lt;token&gt;</code> trong header ƒë·ªÉ
                        truy c·∫≠p.</li>
                </ul>


                <h5>4.3 So s√°nh Sanctum v√† Passport</h5>
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>Ti√™u ch√≠</th>
                            <th>Sanctum</th>
                            <th>Passport</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Chu·∫©n giao ti·∫øp</td>
                            <td>T·ª± ƒë·ªãnh nghƒ©a token</td>
                            <td>Chu·∫©n OAuth2</td>
                        </tr>
                        <tr>
                            <td>ƒê·ªô ph·ª©c t·∫°p</td>
                            <td>Th·∫•p</td>
                            <td>Cao</td>
                        </tr>
                        <tr>
                            <td>Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng</td>
                            <td>SPA, mobile app ƒë∆°n gi·∫£n</td>
                            <td>·ª®ng d·ª•ng c·∫ßn li√™n k·∫øt b√™n th·ª© 3</td>
                        </tr>
                        <tr>
                            <td>C∆° ch·∫ø x√°c th·ª±c</td>
                            <td>Token ho·∫∑c cookie</td>
                            <td>Bearer token theo chu·∫©n OAuth2</td>
                        </tr>
                        <tr>
                            <td>Hi·ªáu nƒÉng</td>
                            <td>Nh·∫π</td>
                            <td>N·∫∑ng h∆°n</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="card-footer text-center">
                <small class="text-muted">¬© 2025 Laravel Demo</small>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>
